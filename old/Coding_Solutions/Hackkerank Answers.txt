=================================================
***Questions in CHATGPT 
=================================================
-----------------------------
Project Estimates (8/10 test cases)
-----------------------------
'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}


/*
 * Complete the 'countPairs' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER_ARRAY projectCosts
 *  2. INTEGER target
 */

function countPairs(projectCosts, target) {
    // Write your code here
    let count = 0;
    const set = new Set(); // store unique values 
    
    for (let i = 0; i < projectCosts.length; i++) {
        for (let j = i + 1 ; j < projectCosts.length; j++) {
            let balance = Math.abs(projectCosts[i] - projectCosts[j]);
            if (balance === target) {
                // sort in ascending order 
                let distinctPairs = [projectCosts[i], projectCosts[j]].sort();
                // check if it alr exist. else, add sorted pair to set and increment 
                if (!set.has(distinctPairs)) {
                    set.add(distinctPairs);
                    count++;
                }
            }
        }
    }
    return count;
}

// math.abs()

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const projectCostsCount = parseInt(readLine().trim(), 10);

    let projectCosts = [];

    for (let i = 0; i < projectCostsCount; i++) {
        const projectCostsItem = parseInt(readLine().trim(), 10);
        projectCosts.push(projectCostsItem);
    }

    const target = parseInt(readLine().trim(), 10);

    const result = countPairs(projectCosts, target);

    ws.write(result + '\n');

    ws.end();
}




====================================================

-----------------------------
 Budget Shopping (7/14 test cases)
-----------------------------
'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}


/*
 * Complete the 'budgetShopping' function below.
 *
 * The function is expected to return an INTEGER.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER_ARRAY bundleQuantities
 *  3. INTEGER_ARRAY bundleCosts
 */

function budgetShopping(n, bundleQuantities, bundleCosts) {
    // Write your code here
    let maxNotebooks = 0;
    
    for (let i = 0; i < bundleQuantities.length; i++) {
        let eachBundle = bundleQuantities[i];
        let eachCostofBundle = bundleCosts[i];
        
        // no. of bundles that can be purchased within budget 
        let bundle = Math.floor(n / eachCostofBundle);
        maxNotebooks += bundle * eachBundle;
        n -= bundle * eachCostofBundle;   
    }
    return maxNotebooks;
}
function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine().trim(), 10);

    const bundleQuantitiesCount = parseInt(readLine().trim(), 10);

    let bundleQuantities = [];

    for (let i = 0; i < bundleQuantitiesCount; i++) {
        const bundleQuantitiesItem = parseInt(readLine().trim(), 10);
        bundleQuantities.push(bundleQuantitiesItem);
    }

    const bundleCostsCount = parseInt(readLine().trim(), 10);

    let bundleCosts = [];

    for (let i = 0; i < bundleCostsCount; i++) {
        const bundleCostsItem = parseInt(readLine().trim(), 10);
        bundleCosts.push(bundleCostsItem);
    }

    const result = budgetShopping(n, bundleQuantities, bundleCosts);

    ws.write(result + '\n');

    ws.end();
}

=========================================

-----------------------------
 Are they pangrams?  (10/10 test cases)
-----------------------------

'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', function(inputStdin) {
    inputString += inputStdin;
});

process.stdin.on('end', function() {
    inputString = inputString.split('\n');

    main();
});

function readLine() {
    return inputString[currentLine++];
}



/*
 * Complete the 'isPangram' function below.
 *
 * The function is expected to return a STRING.
 * The function accepts STRING_ARRAY pangram as parameter.
 */

function isPangram(pangram) {
    // Write your code here
    const results = [];
    
    for (let i = 0; i < pangram.length; i++) {
        let isPangram = true; 
        let alphabets = "abcdefghijklmnopqrstuvwxyz";
        let lowercasePangram = pangram[i].toLowerCase();
        let set = new Set(lowercasePangram);
        
        for (let j = 0; j < alphabets.length; j++) {
            if (!set.has(alphabets[j])) {
                isPangram = false;
                break;
            }
        }
        results.push(isPangram ? "1" : "0");
    }
    return results.join("");
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const pangramCount = parseInt(readLine().trim(), 10);

    let pangram = [];

    for (let i = 0; i < pangramCount; i++) {
        const pangramItem = readLine();
        pangram.push(pangramItem);
    }

    const result = isPangram(pangram);

    ws.write(result + '\n');

    ws.end();
}
